@using WebPortal.Models.Marketplace
@model CatalogViewModel

@{
    Layout = "_LayoutMarketplace";
}

@{
    ViewData["Title"] = "Каталог товаров";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Каталог товаров</h2>
        <div class="btn-group">
            @if (Model.CanAdd)
            {
                <a href="@Url.Action("Add")" class="btn btn-primary">
                    <i class="fas fa-plus"></i> Добавить товар
                </a>
            }
            @if (Model.CanExport)
            {
                <div class="btn-group">
                    <button type="button" class="btn btn-success dropdown-toggle" data-bs-toggle="dropdown">
                        <i class="fas fa-download"></i> Экспорт
                    </button>
                    <ul class="dropdown-menu">
                        <li>
                            <a class="dropdown-item" href="@Url.Action("Export")">
                                <i class="fas fa-download"></i> Скачать TXT
                            </a>
                        </li>
                        <li>
                            <form asp-action="ExportToFolder" method="post">
                                <button type="submit" class="dropdown-item">
                                    <i class="fas fa-save"></i> Сохранить в папку
                                </button>
                            </form>
                        </li>
                    </ul>
                </div>
            }
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-6">
            <form asp-action="SearchProducts" method="get" class="d-flex">
                <input type="text" name="searchTerm" class="form-control me-2" placeholder="Поиск товаров..." value="@ViewBag.SearchTerm">
                <button type="submit" class="btn btn-outline-primary">
                    <i class="fas fa-search"></i> Поиск
                </button>
            </form>
        </div>
        <div class="col-md-6">
            <div class="btn-group" role="group">
                <a href="@Url.Action("ProductsByType", new { productType = "Laptop" })" class="btn btn-outline-secondary btn-sm">Ноутбуки</a>
                <a href="@Url.Action("ProductsByType", new { productType = "Smartphone" })" class="btn btn-outline-secondary btn-sm">Смартфоны</a>
                <a href="@Url.Action("ProductsByType", new { productType = "SmartWatch" })" class="btn btn-outline-secondary btn-sm">Часы</a>
                <a href="@Url.Action("ProductsByType", new { productType = "Headphones" })" class="btn btn-outline-secondary btn-sm">Наушники</a>
            </div>
        </div>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (Model.Products.Any())
    {
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            @foreach (var product in Model.Products)
            {
                <div class="col" id="product-@product.Id">
                    <div class="card h-100 product-card">
                        <div class="position-relative">
                            @if (!string.IsNullOrEmpty(product.ImageUrl))
                            {
                                <img src="@product.ImageUrl" class="card-img-top p-3" alt="@product.Name" style="height: 200px; object-fit: contain;">
                            }
                            else
                            {
                                <div class="card-img-top p-3 d-flex align-items-center justify-content-center bg-light" style="height: 200px;">
                                    <i class="fas fa-image fa-4x text-secondary"></i>
                                </div>
                            }
                            <span class="position-absolute top-0 start-0 bg-primary text-white px-2 py-1 small">
                                @product.ProductType
                            </span>
                        </div>

                        <div class="card-body">
                            <h5 class="card-title">
                                <a href="@Url.Action("ProductDetails", new { id = product.Id })" class="text-decoration-none">
                                    @product.Name
                                </a>
                            </h5>
                            <p class="card-text text-muted">@product.Brand</p>
                            <p class="card-text small">@product.Description</p>

                            <div class="d-flex justify-content-between align-items-center mt-3">
                                <h5 class="mb-0 text-primary">@product.Price.ToString("C")</h5>
                                <div class="btn-group">
                                    <a href="@Url.Action("ProductDetails", new { id = product.Id })" class="btn btn-sm btn-outline-info">
                                        <i class="fas fa-info-circle"></i>
                                    </a>
                                    <button class="btn btn-sm btn-outline-success add-to-cart" data-id="@product.Id">
                                        <i class="fas fa-shopping-cart"></i>
                                    </button>
                                    @if (Model.CanEdit)
                                    {
                                        <button class="btn btn-sm btn-outline-primary edit-product"
                                                data-id="@product.Id"
                                                data-product-type="@product.ProductType">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                    }
                                    @if (Model.CanDelete)
                                    {
                                        <button class="btn btn-sm btn-outline-danger delete-product"
                                                data-id="@product.Id"
                                                data-product-type="@product.ProductType"
                                                data-name="@product.Name">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>

                        <div class="card-footer bg-transparent">
                            <small class="text-muted">Добавлен: @product.CreatedDate.ToString("dd.MM.yyyy")</small>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="alert alert-info">
            <h4 class="alert-heading">Товары не найдены</h4>
            @if (Model.CanAdd)
            {
                <p><a href="@Url.Action("Add")">Добавьте новый товар</a></p>
            }
            else
            {
                <p>Каталог товаров пуст</p>
            }
        </div>
    }
</div>

@if (Model.CanEdit)
{
    <div id="editProductModalContainer"></div>
}

@section Scripts {
    <script src="~/js/marketplace/catalog.js"></script>
    <script>
        console.log('CanEdit:', @Json.Serialize(Model.CanEdit));
        console.log('Products count:', @Model.Products.Count);
        console.log('Edit buttons:', $('.edit-product').length);
    </script>
}