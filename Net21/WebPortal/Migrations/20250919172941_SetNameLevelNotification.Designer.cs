// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebPortal.DbStuff;

#nullable disable

namespace WebPortal.Migrations
{
    [DbContext(typeof(WebPortalContext))]
    [Migration("20250919172941_SetNameLevelNotification")]
    partial class SetNameLevelNotification
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AnimeGirl", b =>
                {
                    b.Property<int>("AnimesId")
                        .HasColumnType("int");

                    b.Property<int>("CharactersId")
                        .HasColumnType("int");

                    b.HasKey("AnimesId", "CharactersId");

                    b.HasIndex("CharactersId");

                    b.ToTable("AnimeGirl");
                });

            modelBuilder.Entity("GirlUser", b =>
                {
                    b.Property<int>("FavoriteGirlsId")
                        .HasColumnType("int");

                    b.Property<int>("UserWhoAddToFavoriteId")
                        .HasColumnType("int");

                    b.HasKey("FavoriteGirlsId", "UserWhoAddToFavoriteId");

                    b.HasIndex("UserWhoAddToFavoriteId");

                    b.ToTable("GirlUser");
                });

            modelBuilder.Entity("NotificationUser", b =>
                {
                    b.Property<int>("UserWhoViewedItId")
                        .HasColumnType("int");

                    b.Property<int>("ViewedNotificationId")
                        .HasColumnType("int");

                    b.HasKey("UserWhoViewedItId", "ViewedNotificationId");

                    b.HasIndex("ViewedNotificationId");

                    b.ToTable("NotificationUser");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Products");

                    b.HasDiscriminator().HasValue("Product");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.Anime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleasDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Animes");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.CallRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhoneNumber");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Question");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("CallRequests", (string)null);
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.CoffeShop.CoffeeProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("Cell")
                        .HasColumnType("int");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("CoffeeProducts");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.CoffeShop.UserCoffeShop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserCoffeShops");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.CoffeShop.UserComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserComments");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.CommentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("GuitarId")
                        .HasColumnType("int");

                    b.Property<decimal>("Mark")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GuitarId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.CompShop.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categoryes");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.CompShop.Devices.Computer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<double>("Memory")
                        .HasColumnType("float");

                    b.Property<string>("Motherboard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PowerUnit")
                        .HasColumnType("int");

                    b.Property<string>("Processor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ram")
                        .HasColumnType("int");

                    b.Property<string>("VideoCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId")
                        .IsUnique();

                    b.ToTable("Computers");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.CompShop.Devices.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryEnum")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPopular")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("TypeDeviceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.HasIndex("TypeDeviceId")
                        .IsUnique();

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.CompShop.Devices.TypeDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeDevices");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.CompShop.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.Girl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Size")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Girls");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.GuitarEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Guitars");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.HelpfullModels.Suggest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Advise")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Suggests");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.Marketplace.Categories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.Marketplace.ProductImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.Motorcycles.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BrandName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MotorcyleBrands");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.Motorcycles.Motorcycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("AuthorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MotorcycleBrandId")
                        .HasColumnType("int");

                    b.Property<string>("MotorcycleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MotorcycleBrandId");

                    b.HasIndex("TypeId");

                    b.ToTable("Motorcycles");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.Motorcycles.MotorcycleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MotorcycleTypes");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.Notifications.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LevelNotification")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.SpaceNews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("SpaceNews");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.Tourism.TourPreview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DaysToPrepareTour")
                        .HasColumnType("int");

                    b.Property<string>("TourImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TourName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TourRating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TourPreviews");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.Tourism.Tours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<string>("TourImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TourName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<int>("Money")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.Marketplace.Headphones", b =>
                {
                    b.HasBaseType("Product");

                    b.Property<int>("BatteryLife")
                        .HasColumnType("int");

                    b.Property<string>("ConnectionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrequencyResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasMicrophone")
                        .HasColumnType("bit");

                    b.Property<bool>("HasNoiseCancellation")
                        .HasColumnType("bit");

                    b.Property<string>("Impedance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Headphones");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.Marketplace.Laptop", b =>
                {
                    b.HasBaseType("Product");

                    b.Property<string>("GraphicsCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Processor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RAM")
                        .HasColumnType("int");

                    b.Property<double>("ScreenSize")
                        .HasColumnType("float");

                    b.Property<int>("Storage")
                        .HasColumnType("int");

                    b.Property<string>("StorageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Laptop");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.Marketplace.SmartWatch", b =>
                {
                    b.HasBaseType("Product");

                    b.Property<int>("BatteryLife")
                        .HasColumnType("int");

                    b.Property<string>("CompatibleOS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasBloodOxygenMonitor")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHeartRateMonitor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWaterResistant")
                        .HasColumnType("bit");

                    b.Property<string>("WaterResistanceLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Products", t =>
                        {
                            t.Property("BatteryLife")
                                .HasColumnName("SmartWatch_BatteryLife");
                        });

                    b.HasDiscriminator().HasValue("SmartWatch");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.Marketplace.Smartphone", b =>
                {
                    b.HasBaseType("Product");

                    b.Property<int>("BatteryCapacity")
                        .HasColumnType("int");

                    b.Property<int>("CameraCount")
                        .HasColumnType("int");

                    b.Property<bool>("Has5G")
                        .HasColumnType("bit");

                    b.Property<string>("OS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OSVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ScreenSize")
                        .HasColumnType("float");

                    b.ToTable("Products", t =>
                        {
                            t.Property("OS")
                                .HasColumnName("Smartphone_OS");

                            t.Property("ScreenSize")
                                .HasColumnName("Smartphone_ScreenSize");
                        });

                    b.HasDiscriminator().HasValue("Smartphone");
                });

            modelBuilder.Entity("AnimeGirl", b =>
                {
                    b.HasOne("WebPortal.DbStuff.Models.Anime", null)
                        .WithMany()
                        .HasForeignKey("AnimesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebPortal.DbStuff.Models.Girl", null)
                        .WithMany()
                        .HasForeignKey("CharactersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GirlUser", b =>
                {
                    b.HasOne("WebPortal.DbStuff.Models.Girl", null)
                        .WithMany()
                        .HasForeignKey("FavoriteGirlsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebPortal.DbStuff.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserWhoAddToFavoriteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NotificationUser", b =>
                {
                    b.HasOne("WebPortal.DbStuff.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserWhoViewedItId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebPortal.DbStuff.Models.Notifications.Notification", null)
                        .WithMany()
                        .HasForeignKey("ViewedNotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.HasOne("WebPortal.DbStuff.Models.Marketplace.Categories", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WebPortal.DbStuff.Models.User", "User")
                        .WithMany("Products")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.CallRequest", b =>
                {
                    b.HasOne("WebPortal.DbStuff.Models.User", "Author")
                        .WithMany("CallRequests")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Author");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.CoffeShop.CoffeeProduct", b =>
                {
                    b.HasOne("WebPortal.DbStuff.Models.User", "AuthorAdd")
                        .WithMany("CreatedCoffe")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthorAdd");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.CommentEntity", b =>
                {
                    b.HasOne("WebPortal.DbStuff.Models.User", "Author")
                        .WithMany("CommentsForGuitar")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebPortal.DbStuff.Models.GuitarEntity", "Guitar")
                        .WithMany("Comments")
                        .HasForeignKey("GuitarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Guitar");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.CompShop.Devices.Computer", b =>
                {
                    b.HasOne("WebPortal.DbStuff.Models.CompShop.Devices.Device", "Device")
                        .WithOne("Computer")
                        .HasForeignKey("WebPortal.DbStuff.Models.CompShop.Devices.Computer", "DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.CompShop.Devices.Device", b =>
                {
                    b.HasOne("WebPortal.DbStuff.Models.CompShop.Category", "Category")
                        .WithOne("Device")
                        .HasForeignKey("WebPortal.DbStuff.Models.CompShop.Devices.Device", "CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebPortal.DbStuff.Models.CompShop.Devices.TypeDevice", "TypeDevice")
                        .WithOne("Device")
                        .HasForeignKey("WebPortal.DbStuff.Models.CompShop.Devices.Device", "TypeDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("TypeDevice");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.Girl", b =>
                {
                    b.HasOne("WebPortal.DbStuff.Models.User", "Author")
                        .WithMany("CreatedGirls")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Author");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.Marketplace.ProductImages", b =>
                {
                    b.HasOne("Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.Motorcycles.Motorcycle", b =>
                {
                    b.HasOne("WebPortal.DbStuff.Models.Motorcycles.Brand", "MotorcycleBrand")
                        .WithMany("Motorcycles")
                        .HasForeignKey("MotorcycleBrandId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("WebPortal.DbStuff.Models.Motorcycles.MotorcycleType", "Type")
                        .WithMany("Motorcycles")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("MotorcycleBrand");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.Notifications.Notification", b =>
                {
                    b.HasOne("WebPortal.DbStuff.Models.User", "Author")
                        .WithMany("NotificationCreatedByMe")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.SpaceNews", b =>
                {
                    b.HasOne("WebPortal.DbStuff.Models.User", "Author")
                        .WithMany("SpaceNewsAuthorship")
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.Tourism.Tours", b =>
                {
                    b.HasOne("WebPortal.DbStuff.Models.User", "Author")
                        .WithMany("CreatedTours")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.CompShop.Category", b =>
                {
                    b.Navigation("Device")
                        .IsRequired();
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.CompShop.Devices.Device", b =>
                {
                    b.Navigation("Computer")
                        .IsRequired();
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.CompShop.Devices.TypeDevice", b =>
                {
                    b.Navigation("Device")
                        .IsRequired();
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.GuitarEntity", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.Marketplace.Categories", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.Motorcycles.Brand", b =>
                {
                    b.Navigation("Motorcycles");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.Motorcycles.MotorcycleType", b =>
                {
                    b.Navigation("Motorcycles");
                });

            modelBuilder.Entity("WebPortal.DbStuff.Models.User", b =>
                {
                    b.Navigation("CallRequests");

                    b.Navigation("CommentsForGuitar");

                    b.Navigation("CreatedCoffe");

                    b.Navigation("CreatedGirls");

                    b.Navigation("CreatedTours");

                    b.Navigation("NotificationCreatedByMe");

                    b.Navigation("Products");

                    b.Navigation("SpaceNewsAuthorship");
                });
#pragma warning restore 612, 618
        }
    }
}
